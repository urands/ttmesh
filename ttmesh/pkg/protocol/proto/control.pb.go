// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: control.proto

package ttmeshproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flow control: grant additional credits for streaming
type FlowControl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         FlowScope              `protobuf:"varint,1,opt,name=scope,proto3,enum=ttmesh.proto.FlowScope" json:"scope,omitempty"` // PARAM/STEP/WORKFLOW
	Credit        uint32                 `protobuf:"varint,2,opt,name=credit,proto3" json:"credit,omitempty"`                           // how many chunks allowed next
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowControl) Reset() {
	*x = FlowControl{}
	mi := &file_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowControl) ProtoMessage() {}

func (x *FlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowControl.ProtoReflect.Descriptor instead.
func (*FlowControl) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{0}
}

func (x *FlowControl) GetScope() FlowScope {
	if x != nil {
		return x.Scope
	}
	return FlowScope_FLOW_PARAM
}

func (x *FlowControl) GetCredit() uint32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

type Cancel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cancel) Reset() {
	*x = Cancel{}
	mi := &file_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cancel) ProtoMessage() {}

func (x *Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cancel.ProtoReflect.Descriptor instead.
func (*Cancel) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{1}
}

func (x *Cancel) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Control oneof: either FlowControl or Cancel
type Control struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Control_Flow
	//	*Control_Cancel
	//	*Control_Hello
	//	*Control_HelloAck
	//	*Control_GetRoutes
	//	*Control_RoutesReply
	//	*Control_GetIdentity
	//	*Control_IdentityReply
	//	*Control_WorkerRegister
	//	*Control_WorkerAdvert
	//	*Control_WorkerQuery
	//	*Control_WorkerQueryReply
	Kind          isControl_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Control) Reset() {
	*x = Control{}
	mi := &file_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{2}
}

func (x *Control) GetKind() isControl_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Control) GetFlow() *FlowControl {
	if x != nil {
		if x, ok := x.Kind.(*Control_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *Control) GetCancel() *Cancel {
	if x != nil {
		if x, ok := x.Kind.(*Control_Cancel); ok {
			return x.Cancel
		}
	}
	return nil
}

func (x *Control) GetHello() *PeerHello {
	if x != nil {
		if x, ok := x.Kind.(*Control_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *Control) GetHelloAck() *PeerHelloAck {
	if x != nil {
		if x, ok := x.Kind.(*Control_HelloAck); ok {
			return x.HelloAck
		}
	}
	return nil
}

func (x *Control) GetGetRoutes() *GetRoutes {
	if x != nil {
		if x, ok := x.Kind.(*Control_GetRoutes); ok {
			return x.GetRoutes
		}
	}
	return nil
}

func (x *Control) GetRoutesReply() *RoutesReply {
	if x != nil {
		if x, ok := x.Kind.(*Control_RoutesReply); ok {
			return x.RoutesReply
		}
	}
	return nil
}

func (x *Control) GetGetIdentity() *GetIdentity {
	if x != nil {
		if x, ok := x.Kind.(*Control_GetIdentity); ok {
			return x.GetIdentity
		}
	}
	return nil
}

func (x *Control) GetIdentityReply() *IdentityReply {
	if x != nil {
		if x, ok := x.Kind.(*Control_IdentityReply); ok {
			return x.IdentityReply
		}
	}
	return nil
}

func (x *Control) GetWorkerRegister() *WorkerRegister {
	if x != nil {
		if x, ok := x.Kind.(*Control_WorkerRegister); ok {
			return x.WorkerRegister
		}
	}
	return nil
}

func (x *Control) GetWorkerAdvert() *WorkerAdvert {
	if x != nil {
		if x, ok := x.Kind.(*Control_WorkerAdvert); ok {
			return x.WorkerAdvert
		}
	}
	return nil
}

func (x *Control) GetWorkerQuery() *WorkerQuery {
	if x != nil {
		if x, ok := x.Kind.(*Control_WorkerQuery); ok {
			return x.WorkerQuery
		}
	}
	return nil
}

func (x *Control) GetWorkerQueryReply() *WorkerQueryReply {
	if x != nil {
		if x, ok := x.Kind.(*Control_WorkerQueryReply); ok {
			return x.WorkerQueryReply
		}
	}
	return nil
}

type isControl_Kind interface {
	isControl_Kind()
}

type Control_Flow struct {
	Flow *FlowControl `protobuf:"bytes,1,opt,name=flow,proto3,oneof"`
}

type Control_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type Control_Hello struct {
	Hello *PeerHello `protobuf:"bytes,3,opt,name=hello,proto3,oneof"` // peer handshake (client->server)
}

type Control_HelloAck struct {
	HelloAck *PeerHelloAck `protobuf:"bytes,4,opt,name=hello_ack,json=helloAck,proto3,oneof"` // handshake acknowledgement (server->client)
}

type Control_GetRoutes struct {
	GetRoutes *GetRoutes `protobuf:"bytes,5,opt,name=get_routes,json=getRoutes,proto3,oneof"` // request: dump routing table/state
}

type Control_RoutesReply struct {
	RoutesReply *RoutesReply `protobuf:"bytes,6,opt,name=routes_reply,json=routesReply,proto3,oneof"` // reply: routing table snapshot
}

type Control_GetIdentity struct {
	GetIdentity *GetIdentity `protobuf:"bytes,7,opt,name=get_identity,json=getIdentity,proto3,oneof"` // request: node identity
}

type Control_IdentityReply struct {
	IdentityReply *IdentityReply `protobuf:"bytes,8,opt,name=identity_reply,json=identityReply,proto3,oneof"` // reply: node identity
}

type Control_WorkerRegister struct {
	// Worker control
	WorkerRegister *WorkerRegister `protobuf:"bytes,20,opt,name=worker_register,json=workerRegister,proto3,oneof"` // register worker capabilities
}

type Control_WorkerAdvert struct {
	WorkerAdvert *WorkerAdvert `protobuf:"bytes,21,opt,name=worker_advert,json=workerAdvert,proto3,oneof"` // compact gossip advertisement
}

type Control_WorkerQuery struct {
	WorkerQuery *WorkerQuery `protobuf:"bytes,22,opt,name=worker_query,json=workerQuery,proto3,oneof"` // search for workers
}

type Control_WorkerQueryReply struct {
	WorkerQueryReply *WorkerQueryReply `protobuf:"bytes,23,opt,name=worker_query_reply,json=workerQueryReply,proto3,oneof"` // reply with candidates
}

func (*Control_Flow) isControl_Kind() {}

func (*Control_Cancel) isControl_Kind() {}

func (*Control_Hello) isControl_Kind() {}

func (*Control_HelloAck) isControl_Kind() {}

func (*Control_GetRoutes) isControl_Kind() {}

func (*Control_RoutesReply) isControl_Kind() {}

func (*Control_GetIdentity) isControl_Kind() {}

func (*Control_IdentityReply) isControl_Kind() {}

func (*Control_WorkerRegister) isControl_Kind() {}

func (*Control_WorkerAdvert) isControl_Kind() {}

func (*Control_WorkerQuery) isControl_Kind() {}

func (*Control_WorkerQueryReply) isControl_Kind() {}

// Acknowledgement for a specific message id
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Code          AckCode                `protobuf:"varint,2,opt,name=code,proto3,enum=ttmesh.proto.AckCode" json:"code,omitempty"` // OK/NACK
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                        // for NACK
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3}
}

func (x *Ack) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Ack) GetCode() AckCode {
	if x != nil {
		return x.Code
	}
	return AckCode_ACK_OK
}

func (x *Ack) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Placement leasing handshake
type LeaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	StepId        string                 `protobuf:"bytes,2,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	TimeoutMs     uint32                 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaseRequest) Reset() {
	*x = LeaseRequest{}
	mi := &file_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRequest) ProtoMessage() {}

func (x *LeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRequest.ProtoReflect.Descriptor instead.
func (*LeaseRequest) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{4}
}

func (x *LeaseRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *LeaseRequest) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *LeaseRequest) GetTimeoutMs() uint32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

type LeaseReply struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Granted         bool                   `protobuf:"varint,1,opt,name=granted,proto3" json:"granted,omitempty"`
	LeaseId         string                 `protobuf:"bytes,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	LeaseDeadlineMs int64                  `protobuf:"varint,3,opt,name=lease_deadline_ms,json=leaseDeadlineMs,proto3" json:"lease_deadline_ms,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LeaseReply) Reset() {
	*x = LeaseReply{}
	mi := &file_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseReply) ProtoMessage() {}

func (x *LeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseReply.ProtoReflect.Descriptor instead.
func (*LeaseReply) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{5}
}

func (x *LeaseReply) GetGranted() bool {
	if x != nil {
		return x.Granted
	}
	return false
}

func (x *LeaseReply) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

func (x *LeaseReply) GetLeaseDeadlineMs() int64 {
	if x != nil {
		return x.LeaseDeadlineMs
	}
	return 0
}

// Handshake: signed identity announcement
type PeerHello struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeName      string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`    // human-friendly name
	Alg           string                 `protobuf:"bytes,2,opt,name=alg,proto3" json:"alg,omitempty"`                              // "ed25519" etc
	Pubkey        []byte                 `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                        // public key bytes
	Nonce         []byte                 `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                          // random nonce
	TsUnixMs      int64                  `protobuf:"varint,5,opt,name=ts_unix_ms,json=tsUnixMs,proto3" json:"ts_unix_ms,omitempty"` // timestamp (sender clock)
	Sig           []byte                 `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`                              // signature over transcript
	Meta          *PeerMeta              `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`                            // optional initial peer meta
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerHello) Reset() {
	*x = PeerHello{}
	mi := &file_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHello) ProtoMessage() {}

func (x *PeerHello) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHello.ProtoReflect.Descriptor instead.
func (*PeerHello) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{6}
}

func (x *PeerHello) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PeerHello) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *PeerHello) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *PeerHello) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *PeerHello) GetTsUnixMs() int64 {
	if x != nil {
		return x.TsUnixMs
	}
	return 0
}

func (x *PeerHello) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *PeerHello) GetMeta() *PeerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Handshake acknowledgement
type PeerHelloAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	PeerId        string                 `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"` // canonical id (e.g., pk:ed25519:...)
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`               // error message when not accepted
	Meta          *PeerMeta              `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`                   // server-known meta (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerHelloAck) Reset() {
	*x = PeerHelloAck{}
	mi := &file_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerHelloAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHelloAck) ProtoMessage() {}

func (x *PeerHelloAck) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHelloAck.ProtoReflect.Descriptor instead.
func (*PeerHelloAck) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{7}
}

func (x *PeerHelloAck) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *PeerHelloAck) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *PeerHelloAck) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PeerHelloAck) GetMeta() *PeerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Control: routing snapshot request/response
type GetRoutes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoutes) Reset() {
	*x = GetRoutes{}
	mi := &file_control_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutes) ProtoMessage() {}

func (x *GetRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutes.ProtoReflect.Descriptor instead.
func (*GetRoutes) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{8}
}

type PeerAdj struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerAdj) Reset() {
	*x = PeerAdj{}
	mi := &file_control_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerAdj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerAdj) ProtoMessage() {}

func (x *PeerAdj) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerAdj.ProtoReflect.Descriptor instead.
func (*PeerAdj) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{9}
}

func (x *PeerAdj) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PeerAdj) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type RouteCandidatePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"` // "peer:<id>" or "route:<id>"
	Path          []string               `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`     // path-vector
	NextHop       string                 `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	Metric        uint32                 `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`
	Source        string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`                              // gossip/manual/peer
	LearnedFrom   string                 `protobuf:"bytes,6,opt,name=learned_from,json=learnedFrom,proto3" json:"learned_from,omitempty"` // peer id
	Health        string                 `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`                              // up/down/unknown
	UpdatedUnixMs int64                  `protobuf:"varint,8,opt,name=updated_unix_ms,json=updatedUnixMs,proto3" json:"updated_unix_ms,omitempty"`
	ExpiresUnixMs int64                  `protobuf:"varint,9,opt,name=expires_unix_ms,json=expiresUnixMs,proto3" json:"expires_unix_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteCandidatePB) Reset() {
	*x = RouteCandidatePB{}
	mi := &file_control_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteCandidatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCandidatePB) ProtoMessage() {}

func (x *RouteCandidatePB) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCandidatePB.ProtoReflect.Descriptor instead.
func (*RouteCandidatePB) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{10}
}

func (x *RouteCandidatePB) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RouteCandidatePB) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *RouteCandidatePB) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *RouteCandidatePB) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *RouteCandidatePB) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RouteCandidatePB) GetLearnedFrom() string {
	if x != nil {
		return x.LearnedFrom
	}
	return ""
}

func (x *RouteCandidatePB) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *RouteCandidatePB) GetUpdatedUnixMs() int64 {
	if x != nil {
		return x.UpdatedUnixMs
	}
	return 0
}

func (x *RouteCandidatePB) GetExpiresUnixMs() int64 {
	if x != nil {
		return x.ExpiresUnixMs
	}
	return 0
}

type RoutesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*PeerMeta            `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	Targets       []string               `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"` // targets with route candidates
	Candidates    []*RouteCandidatePB    `protobuf:"bytes,3,rep,name=candidates,proto3" json:"candidates,omitempty"`
	Adjacency     []*PeerAdj             `protobuf:"bytes,4,rep,name=adjacency,proto3" json:"adjacency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoutesReply) Reset() {
	*x = RoutesReply{}
	mi := &file_control_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutesReply) ProtoMessage() {}

func (x *RoutesReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutesReply.ProtoReflect.Descriptor instead.
func (*RoutesReply) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{11}
}

func (x *RoutesReply) GetPeers() []*PeerMeta {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *RoutesReply) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *RoutesReply) GetCandidates() []*RouteCandidatePB {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *RoutesReply) GetAdjacency() []*PeerAdj {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

// Identity query/response
type GetIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIdentity) Reset() {
	*x = GetIdentity{}
	mi := &file_control_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentity) ProtoMessage() {}

func (x *GetIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentity.ProtoReflect.Descriptor instead.
func (*GetIdentity) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{12}
}

type IdentityReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeName      string                 `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Alg           string                 `protobuf:"bytes,3,opt,name=alg,proto3" json:"alg,omitempty"`
	Pubkey        []byte                 `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityReply) Reset() {
	*x = IdentityReply{}
	mi := &file_control_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityReply) ProtoMessage() {}

func (x *IdentityReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityReply.ProtoReflect.Descriptor instead.
func (*IdentityReply) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{13}
}

func (x *IdentityReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentityReply) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *IdentityReply) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *IdentityReply) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

var File_control_proto protoreflect.FileDescriptor

const file_control_proto_rawDesc = "" +
	"\n" +
	"\rcontrol.proto\x12\fttmesh.proto\x1a\fcommon.proto\x1a\fworker.proto\"T\n" +
	"\vFlowControl\x12-\n" +
	"\x05scope\x18\x01 \x01(\x0e2\x17.ttmesh.proto.FlowScopeR\x05scope\x12\x16\n" +
	"\x06credit\x18\x02 \x01(\rR\x06credit\" \n" +
	"\x06Cancel\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\"\xfa\x05\n" +
	"\aControl\x12/\n" +
	"\x04flow\x18\x01 \x01(\v2\x19.ttmesh.proto.FlowControlH\x00R\x04flow\x12.\n" +
	"\x06cancel\x18\x02 \x01(\v2\x14.ttmesh.proto.CancelH\x00R\x06cancel\x12/\n" +
	"\x05hello\x18\x03 \x01(\v2\x17.ttmesh.proto.PeerHelloH\x00R\x05hello\x129\n" +
	"\thello_ack\x18\x04 \x01(\v2\x1a.ttmesh.proto.PeerHelloAckH\x00R\bhelloAck\x128\n" +
	"\n" +
	"get_routes\x18\x05 \x01(\v2\x17.ttmesh.proto.GetRoutesH\x00R\tgetRoutes\x12>\n" +
	"\froutes_reply\x18\x06 \x01(\v2\x19.ttmesh.proto.RoutesReplyH\x00R\vroutesReply\x12>\n" +
	"\fget_identity\x18\a \x01(\v2\x19.ttmesh.proto.GetIdentityH\x00R\vgetIdentity\x12D\n" +
	"\x0eidentity_reply\x18\b \x01(\v2\x1b.ttmesh.proto.IdentityReplyH\x00R\ridentityReply\x12G\n" +
	"\x0fworker_register\x18\x14 \x01(\v2\x1c.ttmesh.proto.WorkerRegisterH\x00R\x0eworkerRegister\x12A\n" +
	"\rworker_advert\x18\x15 \x01(\v2\x1a.ttmesh.proto.WorkerAdvertH\x00R\fworkerAdvert\x12>\n" +
	"\fworker_query\x18\x16 \x01(\v2\x19.ttmesh.proto.WorkerQueryH\x00R\vworkerQuery\x12N\n" +
	"\x12worker_query_reply\x18\x17 \x01(\v2\x1e.ttmesh.proto.WorkerQueryReplyH\x00R\x10workerQueryReplyB\x06\n" +
	"\x04kind\"g\n" +
	"\x03Ack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12)\n" +
	"\x04code\x18\x02 \x01(\x0e2\x15.ttmesh.proto.AckCodeR\x04code\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"g\n" +
	"\fLeaseRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x17\n" +
	"\astep_id\x18\x02 \x01(\tR\x06stepId\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x03 \x01(\rR\ttimeoutMs\"m\n" +
	"\n" +
	"LeaseReply\x12\x18\n" +
	"\agranted\x18\x01 \x01(\bR\agranted\x12\x19\n" +
	"\blease_id\x18\x02 \x01(\tR\aleaseId\x12*\n" +
	"\x11lease_deadline_ms\x18\x03 \x01(\x03R\x0fleaseDeadlineMs\"\xc4\x01\n" +
	"\tPeerHello\x12\x1b\n" +
	"\tnode_name\x18\x01 \x01(\tR\bnodeName\x12\x10\n" +
	"\x03alg\x18\x02 \x01(\tR\x03alg\x12\x16\n" +
	"\x06pubkey\x18\x03 \x01(\fR\x06pubkey\x12\x14\n" +
	"\x05nonce\x18\x04 \x01(\fR\x05nonce\x12\x1c\n" +
	"\n" +
	"ts_unix_ms\x18\x05 \x01(\x03R\btsUnixMs\x12\x10\n" +
	"\x03sig\x18\x06 \x01(\fR\x03sig\x12*\n" +
	"\x04meta\x18\a \x01(\v2\x16.ttmesh.proto.PeerMetaR\x04meta\"\x87\x01\n" +
	"\fPeerHelloAck\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12*\n" +
	"\x04meta\x18\x04 \x01(\v2\x16.ttmesh.proto.PeerMetaR\x04meta\"\v\n" +
	"\tGetRoutes\"-\n" +
	"\aPeerAdj\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\"\x94\x02\n" +
	"\x10RouteCandidatePB\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x12\n" +
	"\x04path\x18\x02 \x03(\tR\x04path\x12\x19\n" +
	"\bnext_hop\x18\x03 \x01(\tR\anextHop\x12\x16\n" +
	"\x06metric\x18\x04 \x01(\rR\x06metric\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12!\n" +
	"\flearned_from\x18\x06 \x01(\tR\vlearnedFrom\x12\x16\n" +
	"\x06health\x18\a \x01(\tR\x06health\x12&\n" +
	"\x0fupdated_unix_ms\x18\b \x01(\x03R\rupdatedUnixMs\x12&\n" +
	"\x0fexpires_unix_ms\x18\t \x01(\x03R\rexpiresUnixMs\"\xca\x01\n" +
	"\vRoutesReply\x12,\n" +
	"\x05peers\x18\x01 \x03(\v2\x16.ttmesh.proto.PeerMetaR\x05peers\x12\x18\n" +
	"\atargets\x18\x02 \x03(\tR\atargets\x12>\n" +
	"\n" +
	"candidates\x18\x03 \x03(\v2\x1e.ttmesh.proto.RouteCandidatePBR\n" +
	"candidates\x123\n" +
	"\tadjacency\x18\x04 \x03(\v2\x15.ttmesh.proto.PeerAdjR\tadjacency\"\r\n" +
	"\vGetIdentity\"f\n" +
	"\rIdentityReply\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tnode_name\x18\x02 \x01(\tR\bnodeName\x12\x10\n" +
	"\x03alg\x18\x03 \x01(\tR\x03alg\x12\x16\n" +
	"\x06pubkey\x18\x04 \x01(\fR\x06pubkeyB'Z%ttmesh/pkg/protocol/proto;ttmeshprotob\x06proto3"

var (
	file_control_proto_rawDescOnce sync.Once
	file_control_proto_rawDescData []byte
)

func file_control_proto_rawDescGZIP() []byte {
	file_control_proto_rawDescOnce.Do(func() {
		file_control_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_proto_rawDesc), len(file_control_proto_rawDesc)))
	})
	return file_control_proto_rawDescData
}

var file_control_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_control_proto_goTypes = []any{
	(*FlowControl)(nil),      // 0: ttmesh.proto.FlowControl
	(*Cancel)(nil),           // 1: ttmesh.proto.Cancel
	(*Control)(nil),          // 2: ttmesh.proto.Control
	(*Ack)(nil),              // 3: ttmesh.proto.Ack
	(*LeaseRequest)(nil),     // 4: ttmesh.proto.LeaseRequest
	(*LeaseReply)(nil),       // 5: ttmesh.proto.LeaseReply
	(*PeerHello)(nil),        // 6: ttmesh.proto.PeerHello
	(*PeerHelloAck)(nil),     // 7: ttmesh.proto.PeerHelloAck
	(*GetRoutes)(nil),        // 8: ttmesh.proto.GetRoutes
	(*PeerAdj)(nil),          // 9: ttmesh.proto.PeerAdj
	(*RouteCandidatePB)(nil), // 10: ttmesh.proto.RouteCandidatePB
	(*RoutesReply)(nil),      // 11: ttmesh.proto.RoutesReply
	(*GetIdentity)(nil),      // 12: ttmesh.proto.GetIdentity
	(*IdentityReply)(nil),    // 13: ttmesh.proto.IdentityReply
	(FlowScope)(0),           // 14: ttmesh.proto.FlowScope
	(*WorkerRegister)(nil),   // 15: ttmesh.proto.WorkerRegister
	(*WorkerAdvert)(nil),     // 16: ttmesh.proto.WorkerAdvert
	(*WorkerQuery)(nil),      // 17: ttmesh.proto.WorkerQuery
	(*WorkerQueryReply)(nil), // 18: ttmesh.proto.WorkerQueryReply
	(AckCode)(0),             // 19: ttmesh.proto.AckCode
	(*PeerMeta)(nil),         // 20: ttmesh.proto.PeerMeta
}
var file_control_proto_depIdxs = []int32{
	14, // 0: ttmesh.proto.FlowControl.scope:type_name -> ttmesh.proto.FlowScope
	0,  // 1: ttmesh.proto.Control.flow:type_name -> ttmesh.proto.FlowControl
	1,  // 2: ttmesh.proto.Control.cancel:type_name -> ttmesh.proto.Cancel
	6,  // 3: ttmesh.proto.Control.hello:type_name -> ttmesh.proto.PeerHello
	7,  // 4: ttmesh.proto.Control.hello_ack:type_name -> ttmesh.proto.PeerHelloAck
	8,  // 5: ttmesh.proto.Control.get_routes:type_name -> ttmesh.proto.GetRoutes
	11, // 6: ttmesh.proto.Control.routes_reply:type_name -> ttmesh.proto.RoutesReply
	12, // 7: ttmesh.proto.Control.get_identity:type_name -> ttmesh.proto.GetIdentity
	13, // 8: ttmesh.proto.Control.identity_reply:type_name -> ttmesh.proto.IdentityReply
	15, // 9: ttmesh.proto.Control.worker_register:type_name -> ttmesh.proto.WorkerRegister
	16, // 10: ttmesh.proto.Control.worker_advert:type_name -> ttmesh.proto.WorkerAdvert
	17, // 11: ttmesh.proto.Control.worker_query:type_name -> ttmesh.proto.WorkerQuery
	18, // 12: ttmesh.proto.Control.worker_query_reply:type_name -> ttmesh.proto.WorkerQueryReply
	19, // 13: ttmesh.proto.Ack.code:type_name -> ttmesh.proto.AckCode
	20, // 14: ttmesh.proto.PeerHello.meta:type_name -> ttmesh.proto.PeerMeta
	20, // 15: ttmesh.proto.PeerHelloAck.meta:type_name -> ttmesh.proto.PeerMeta
	20, // 16: ttmesh.proto.RoutesReply.peers:type_name -> ttmesh.proto.PeerMeta
	10, // 17: ttmesh.proto.RoutesReply.candidates:type_name -> ttmesh.proto.RouteCandidatePB
	9,  // 18: ttmesh.proto.RoutesReply.adjacency:type_name -> ttmesh.proto.PeerAdj
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_control_proto_init() }
func file_control_proto_init() {
	if File_control_proto != nil {
		return
	}
	file_common_proto_init()
	file_worker_proto_init()
	file_control_proto_msgTypes[2].OneofWrappers = []any{
		(*Control_Flow)(nil),
		(*Control_Cancel)(nil),
		(*Control_Hello)(nil),
		(*Control_HelloAck)(nil),
		(*Control_GetRoutes)(nil),
		(*Control_RoutesReply)(nil),
		(*Control_GetIdentity)(nil),
		(*Control_IdentityReply)(nil),
		(*Control_WorkerRegister)(nil),
		(*Control_WorkerAdvert)(nil),
		(*Control_WorkerQuery)(nil),
		(*Control_WorkerQueryReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_proto_rawDesc), len(file_control_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_proto_goTypes,
		DependencyIndexes: file_control_proto_depIdxs,
		MessageInfos:      file_control_proto_msgTypes,
	}.Build()
	File_control_proto = out.File
	file_control_proto_goTypes = nil
	file_control_proto_depIdxs = nil
}
